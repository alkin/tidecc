MSP430 C/C++ Optimizer                  v3.3.1
Build Number 1KGCQ-KDADEMDK-RTARQ-TAV-ZACIF_T_T_R

		======File-level Analysis Summary======


extern void datalog_add_to_buffer() is called from 11 sites in this file.
    It appears to be inlineable (size = 37 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void datalog_sm() is called from 8 sites in this file.
    It appears to be inlineable (size = 210 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	flash_erase_page() (1 times)
	datalog_add_to_buffer() (11 times)
	datalog_write_buffer() (2 times)
	is_bluerobin_flash_write_window() (1 times)

extern void datalog_write_buffer() is called from 2 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	display_symbol() (1 times)
	flash_write() (2 times)

extern void display_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 12 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	display_chars() (1 times)

extern void do_bike_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 97 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (4 times)

extern void do_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 232 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (2 times)

extern unsigned char is_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 8 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void reset_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	flash_erase_page() (1 times)

extern void start_datalog() is called from 2 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (1 times)
	display_symbol() (1 times)
	start_altitude_measurement() (1 times)
	stop_bluerobin() (1 times)
	start_bluerobin() (1 times)
	is_bluerobin() (1 times)

extern void stop_datalog() is called from 2 sites in this file.
    It appears to be inlineable (size = 29 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	display_symbol() (1 times)
	stop_altitude_measurement() (1 times)
	datalog_sm() (1 times)
	stop_bluerobin() (1 times)
	is_bluerobin() (1 times)

extern void sx_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 42 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	stop_datalog() (1 times)
	start_datalog() (1 times)

extern void toggle_bike_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	stop_datalog() (1 times)
	start_datalog() (1 times)


These functions may be recursive:
	display_datalog()
	do_bike_datalog()
	do_datalog()
	reset_datalog()
	sx_datalog()
	toggle_bike_datalog()
	stop_datalog()
	start_datalog()
	datalog_sm()
	datalog_write_buffer()

These external functions are called but not defined here:
	stop_altitude_measurement()
	is_bluerobin()
	start_bluerobin()
	stop_bluerobin()
	start_altitude_measurement()
	display_chars()
	flash_write()
	display_symbol()
	is_bluerobin_flash_write_window()
	flash_erase_page()


		======= End file-level Analysis =======


==============================================================================

extern void datalog_write_buffer() is called from 2 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void datalog_add_to_buffer() is called from 11 sites in this file.
    It appears to be inlineable (size = 37 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

ADVICE: In function datalog_add_to_buffer() in ../logic/datalog.c
	in the 'for' loop with loop variable 'i' at lines 307-314
	for the statement ((unsigned char *)sDatalog)[T$1+7] = data[i]; at line 312
	and the statement (*&sDatalog).idx = T$1+1; at line 312

	Consider declaring 'data' as unsigned char * const restrict data
	to assert that lvalues data[i];
	and                    (*&sDatalog).idx;
	do not access the same object in memory.

ADVICE: In function datalog_add_to_buffer() in ../logic/datalog.c
	in the 'for' loop with loop variable 'i' at lines 307-314
	for the statement ((unsigned char *)sDatalog)[T$1+7] = data[i]; at line 312

	Consider declaring 'data' as unsigned char * const restrict data
	to assert that lvalues data[i];
	and                    ((unsigned char *)sDatalog)[T$1+7];
	do not access the same object in memory.

==============================================================================

extern void datalog_sm() is called from 8 sites in this file.
    It appears to be inlineable (size = 210 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_write_buffer() (2 times)
	datalog_add_to_buffer() (11 times)

==============================================================================

extern void start_datalog() is called from 2 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (1 times)

==============================================================================

extern void stop_datalog() is called from 2 sites in this file.
    It appears to be inlineable (size = 29 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (1 times)

==============================================================================

extern void toggle_bike_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	start_datalog() (1 times)
	stop_datalog() (1 times)

==============================================================================

extern void sx_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 42 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	start_datalog() (1 times)
	stop_datalog() (1 times)

==============================================================================

extern void reset_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern unsigned char is_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 8 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void do_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 232 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (2 times)

==============================================================================

extern void do_bike_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 97 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	datalog_sm() (4 times)

==============================================================================

extern void display_datalog() is called from 0 sites in this file.
    It appears to be inlineable (size = 12 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>
<<NULL MIX DOMAIN>>

== END OF INFO OUTPUT==
